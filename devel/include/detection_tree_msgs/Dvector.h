// Generated by gencpp from file detection_tree_msgs/Dvector.msg
// DO NOT EDIT!


#ifndef DETECTION_TREE_MSGS_MESSAGE_DVECTOR_H
#define DETECTION_TREE_MSGS_MESSAGE_DVECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace detection_tree_msgs
{
template <class ContainerAllocator>
struct Dvector_
{
  typedef Dvector_<ContainerAllocator> Type;

  Dvector_()
    : dvector_num(0)
    , camera_header()
    , sub_pt()
    , azimuth(0.0)
    , elevation(0.0)
    , box_height(0)
    , box_width(0)
    , class_id()
    , dobject_num(0)
    , probability(0.0)  {
    }
  Dvector_(const ContainerAllocator& _alloc)
    : dvector_num(0)
    , camera_header(_alloc)
    , sub_pt(_alloc)
    , azimuth(0.0)
    , elevation(0.0)
    , box_height(0)
    , box_width(0)
    , class_id(_alloc)
    , dobject_num(0)
    , probability(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _dvector_num_type;
  _dvector_num_type dvector_num;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _camera_header_type;
  _camera_header_type camera_header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _sub_pt_type;
  _sub_pt_type sub_pt;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef double _elevation_type;
  _elevation_type elevation;

   typedef int64_t _box_height_type;
  _box_height_type box_height;

   typedef int64_t _box_width_type;
  _box_width_type box_width;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _class_id_type;
  _class_id_type class_id;

   typedef int32_t _dobject_num_type;
  _dobject_num_type dobject_num;

   typedef double _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::detection_tree_msgs::Dvector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_tree_msgs::Dvector_<ContainerAllocator> const> ConstPtr;

}; // struct Dvector_

typedef ::detection_tree_msgs::Dvector_<std::allocator<void> > Dvector;

typedef boost::shared_ptr< ::detection_tree_msgs::Dvector > DvectorPtr;
typedef boost::shared_ptr< ::detection_tree_msgs::Dvector const> DvectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_tree_msgs::Dvector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_tree_msgs::Dvector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_tree_msgs::Dvector_<ContainerAllocator1> & lhs, const ::detection_tree_msgs::Dvector_<ContainerAllocator2> & rhs)
{
  return lhs.dvector_num == rhs.dvector_num &&
    lhs.camera_header == rhs.camera_header &&
    lhs.sub_pt == rhs.sub_pt &&
    lhs.azimuth == rhs.azimuth &&
    lhs.elevation == rhs.elevation &&
    lhs.box_height == rhs.box_height &&
    lhs.box_width == rhs.box_width &&
    lhs.class_id == rhs.class_id &&
    lhs.dobject_num == rhs.dobject_num &&
    lhs.probability == rhs.probability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_tree_msgs::Dvector_<ContainerAllocator1> & lhs, const ::detection_tree_msgs::Dvector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_tree_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_tree_msgs::Dvector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_tree_msgs::Dvector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_tree_msgs::Dvector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac5b92b151d663eccd740b80612c355c";
  }

  static const char* value(const ::detection_tree_msgs::Dvector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac5b92b151d663ecULL;
  static const uint64_t static_value2 = 0xcd740b80612c355cULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_tree_msgs/Dvector";
  }

  static const char* value(const ::detection_tree_msgs::Dvector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 dvector_num\n"
"std_msgs/Header camera_header\n"
"geometry_msgs/Point sub_pt\n"
"float64 azimuth\n"
"float64 elevation\n"
"int64 box_height\n"
"int64 box_width\n"
"string class_id\n"
"int32 dobject_num\n"
"float64 probability\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::detection_tree_msgs::Dvector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dvector_num);
      stream.next(m.camera_header);
      stream.next(m.sub_pt);
      stream.next(m.azimuth);
      stream.next(m.elevation);
      stream.next(m.box_height);
      stream.next(m.box_width);
      stream.next(m.class_id);
      stream.next(m.dobject_num);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dvector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_tree_msgs::Dvector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_tree_msgs::Dvector_<ContainerAllocator>& v)
  {
    s << indent << "dvector_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dvector_num);
    s << indent << "camera_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_header);
    s << indent << "sub_pt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.sub_pt);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "elevation: ";
    Printer<double>::stream(s, indent + "  ", v.elevation);
    s << indent << "box_height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.box_height);
    s << indent << "box_width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.box_width);
    s << indent << "class_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.class_id);
    s << indent << "dobject_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dobject_num);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_TREE_MSGS_MESSAGE_DVECTOR_H
