// Generated by gencpp from file darknet_multiplexer_msgs/DarknetCamerasRequest.msg
// DO NOT EDIT!


#ifndef DARKNET_MULTIPLEXER_MSGS_MESSAGE_DARKNETCAMERASREQUEST_H
#define DARKNET_MULTIPLEXER_MSGS_MESSAGE_DARKNETCAMERASREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace darknet_multiplexer_msgs
{
template <class ContainerAllocator>
struct DarknetCamerasRequest_
{
  typedef DarknetCamerasRequest_<ContainerAllocator> Type;

  DarknetCamerasRequest_()
    : actives()  {
    }
  DarknetCamerasRequest_(const ContainerAllocator& _alloc)
    : actives(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _actives_type;
  _actives_type actives;





  typedef boost::shared_ptr< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DarknetCamerasRequest_

typedef ::darknet_multiplexer_msgs::DarknetCamerasRequest_<std::allocator<void> > DarknetCamerasRequest;

typedef boost::shared_ptr< ::darknet_multiplexer_msgs::DarknetCamerasRequest > DarknetCamerasRequestPtr;
typedef boost::shared_ptr< ::darknet_multiplexer_msgs::DarknetCamerasRequest const> DarknetCamerasRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator1> & lhs, const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator2> & rhs)
{
  return lhs.actives == rhs.actives;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator1> & lhs, const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_multiplexer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08e5da29f61cb9a8287af04c34f32436";
  }

  static const char* value(const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08e5da29f61cb9a8ULL;
  static const uint64_t static_value2 = 0x287af04c34f32436ULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_multiplexer_msgs/DarknetCamerasRequest";
  }

  static const char* value(const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# How to publish from cmd line: rosservice call darknet_multiplexer/configure_active_cameras \"{actives:[1,0,1,0,1,0]}\"\n"
"# DOWNCAM_INDEX=5\n"
"# NUMBER_CAMERAS=6\n"
"bool[] actives\n"
;
  }

  static const char* value(const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actives);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DarknetCamerasRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_multiplexer_msgs::DarknetCamerasRequest_<ContainerAllocator>& v)
  {
    s << indent << "actives[]" << std::endl;
    for (size_t i = 0; i < v.actives.size(); ++i)
    {
      s << indent << "  actives[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.actives[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_MULTIPLEXER_MSGS_MESSAGE_DARKNETCAMERASREQUEST_H
