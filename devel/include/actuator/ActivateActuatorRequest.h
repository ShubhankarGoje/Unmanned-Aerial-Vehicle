// Generated by gencpp from file actuator/ActivateActuatorRequest.msg
// DO NOT EDIT!


#ifndef ACTUATOR_MESSAGE_ACTIVATEACTUATORREQUEST_H
#define ACTUATOR_MESSAGE_ACTIVATEACTUATORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuator
{
template <class ContainerAllocator>
struct ActivateActuatorRequest_
{
  typedef ActivateActuatorRequest_<ContainerAllocator> Type;

  ActivateActuatorRequest_()
    : actuatorNumber(0)
    , activationTime(0)  {
    }
  ActivateActuatorRequest_(const ContainerAllocator& _alloc)
    : actuatorNumber(0)
    , activationTime(0)  {
  (void)_alloc;
    }



   typedef int8_t _actuatorNumber_type;
  _actuatorNumber_type actuatorNumber;

   typedef int32_t _activationTime_type;
  _activationTime_type activationTime;





  typedef boost::shared_ptr< ::actuator::ActivateActuatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuator::ActivateActuatorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ActivateActuatorRequest_

typedef ::actuator::ActivateActuatorRequest_<std::allocator<void> > ActivateActuatorRequest;

typedef boost::shared_ptr< ::actuator::ActivateActuatorRequest > ActivateActuatorRequestPtr;
typedef boost::shared_ptr< ::actuator::ActivateActuatorRequest const> ActivateActuatorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuator::ActivateActuatorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuator::ActivateActuatorRequest_<ContainerAllocator1> & lhs, const ::actuator::ActivateActuatorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.actuatorNumber == rhs.actuatorNumber &&
    lhs.activationTime == rhs.activationTime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuator::ActivateActuatorRequest_<ContainerAllocator1> & lhs, const ::actuator::ActivateActuatorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuator::ActivateActuatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuator::ActivateActuatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuator::ActivateActuatorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae4e2550a20f18efb89cde3cf018b8b4";
  }

  static const char* value(const ::actuator::ActivateActuatorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae4e2550a20f18efULL;
  static const uint64_t static_value2 = 0xb89cde3cf018b8b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuator/ActivateActuatorRequest";
  }

  static const char* value(const ::actuator::ActivateActuatorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 actuatorNumber\n"
"int32 activationTime\n"
"\n"
;
  }

  static const char* value(const ::actuator::ActivateActuatorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actuatorNumber);
      stream.next(m.activationTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActivateActuatorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuator::ActivateActuatorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuator::ActivateActuatorRequest_<ContainerAllocator>& v)
  {
    s << indent << "actuatorNumber: ";
    Printer<int8_t>::stream(s, indent + "  ", v.actuatorNumber);
    s << indent << "activationTime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.activationTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATOR_MESSAGE_ACTIVATEACTUATORREQUEST_H
