// Generated by gencpp from file uuv_control_msgs/AddWaypointRequest.msg
// DO NOT EDIT!


#ifndef UUV_CONTROL_MSGS_MESSAGE_ADDWAYPOINTREQUEST_H
#define UUV_CONTROL_MSGS_MESSAGE_ADDWAYPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuv_control_msgs/Waypoint.h>

namespace uuv_control_msgs
{
template <class ContainerAllocator>
struct AddWaypointRequest_
{
  typedef AddWaypointRequest_<ContainerAllocator> Type;

  AddWaypointRequest_()
    : waypoint()  {
    }
  AddWaypointRequest_(const ContainerAllocator& _alloc)
    : waypoint(_alloc)  {
  (void)_alloc;
    }



   typedef  ::uuv_control_msgs::Waypoint_<ContainerAllocator>  _waypoint_type;
  _waypoint_type waypoint;





  typedef boost::shared_ptr< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddWaypointRequest_

typedef ::uuv_control_msgs::AddWaypointRequest_<std::allocator<void> > AddWaypointRequest;

typedef boost::shared_ptr< ::uuv_control_msgs::AddWaypointRequest > AddWaypointRequestPtr;
typedef boost::shared_ptr< ::uuv_control_msgs::AddWaypointRequest const> AddWaypointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator1> & lhs, const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.waypoint == rhs.waypoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator1> & lhs, const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a004c7bf8d1b045f54b4f0d0d7256f0";
  }

  static const char* value(const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a004c7bf8d1b045ULL;
  static const uint64_t static_value2 = 0xf54b4f0d0d7256f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_control_msgs/AddWaypointRequest";
  }

  static const char* value(const ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_control_msgs::AddWaypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# C